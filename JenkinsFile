pipeline {
    agent any

    environment {
        MAVEN_HOME = "C:/Program Files/Maven/apache-maven-3.9.9" // Replace with actual Maven path
        PATH = "${env.MAVEN_HOME}/bin;${env.PATH}" // Add Maven to PATH for Windows
        EMAIL_RECIPIENT = "ssgulluoglu@gmail.com" // Replace with actual recipient email
    }

    stages {
        // Stage 1: Build the application
        stage('Build') {
            steps {
                echo 'Building the application...'
                // Correct bat command
                bat "\"%MAVEN_HOME%\\bin\\mvn\" clean package"
            }
        }

        // Stage 2: Run Unit and Integration Tests
        stage('Unit and Integration Tests') {
            steps {
                echo 'Running Unit and Integration Tests...'
                // Correct bat command
                bat "\"%MAVEN_HOME%\\bin\\mvn\" test"
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
                success {
                    emailext (
                        to: "${env.EMAIL_RECIPIENT}",
                        subject: "Jenkins Pipeline - Tests SUCCESS",
                        body: "The Unit and Integration Tests completed successfully.",
                        attachLog: true
                    )
                }
                failure {
                    emailext (
                        to: "${env.EMAIL_RECIPIENT}",
                        subject: "Jenkins Pipeline - Tests FAILURE",
                        body: "The Unit and Integration Tests failed. Check the logs for details.",
                        attachLog: true
                    )
                }
            }
        }

        // Stage 3: Code Analysis with SonarQube
        stage('Code Analysis') {
            steps {
                echo 'Running Code Analysis with SonarQube...'
                // Correct bat command
                withSonarQubeEnv('SonarQubeServer') {
                    bat "\"%MAVEN_HOME%\\bin\\mvn\" sonar:sonar"
                }
            }
        }

        // Stage 4: Security Scan using OWASP Dependency Check
        stage('Security Scan') {
            steps {
                echo 'Running Security Scan with OWASP Dependency-Check...'
                // Correct bat command
                bat "\"%MAVEN_HOME%\\bin\\mvn\" org.owasp:dependency-check-maven:check"
            }
            post {
                success {
                    emailext (
                        to: "${env.EMAIL_RECIPIENT}",
                        subject: "Jenkins Pipeline - Security Scan SUCCESS",
                        body: "The Security Scan completed successfully.",
                        attachLog: true
                    )
                }
                failure {
                    emailext (
                        to: "${env.EMAIL_RECIPIENT}",
                        subject: "Jenkins Pipeline - Security Scan FAILURE",
                        body: "The Security Scan failed. Check the logs for details.",
                        attachLog: true
                    )
                }
            }
        }

        // Stage 5: Deploy to Staging (using AWS CLI or other deployment method)
        stage('Deploy to Staging') {
            steps {
                echo 'Deploying to Staging Environment...'
                // Correct bat command
                bat "\"aws deploy --application-name my-app --deployment-group staging --s3-location s3://my-bucket/app.zip\""
            }
        }

        // Stage 6: Run Integration Tests on Staging
        stage('Integration Tests on Staging') {
            steps {
                echo 'Running Integration Tests on Staging...'
                // Correct bat command
                bat "\"%MAVEN_HOME%\\bin\\mvn\" verify"
            }
        }

        // Stage 7: Deploy to Production (using AWS CLI or other deployment method)
        stage('Deploy to Production') {
            steps {
                echo 'Deploying to Production Environment...'
                // Correct bat command
                bat "\"aws deploy --application-name my-app --deployment-group production --s3-location s3://my-bucket/app.zip\""
            }
        }
    }
}
