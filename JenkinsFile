pipeline {
    agent any

    environment {
        // SonarQube credentials
        SONAR_LOGIN = credentials('sonar-login')  // SonarQube login (replace with actual credentials ID)
        SONAR_PASSWORD = credentials('sonar-password')  // SonarQube password (replace with actual credentials ID)

        // Environment variables overriding SonarQube properties
        SONAR_WEB_SYSTEMPASSCODE = 'your-system-passcode'  // Example passcode, modify as needed

        // Database configuration (example for PostgreSQL)
        SONAR_JDBC_URL = 'jdbc:postgresql://localhost/sonarqube?currentSchema=my_schema'
        SONAR_JDBC_USERNAME = 'sonarqube'
        SONAR_JDBC_PASSWORD = 'sonarqube81'

        // Web server configuration
        SONAR_WEB_PORT = '9000'  // Example for setting the web port, customize as needed
    }

    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            steps {
                echo 'Building the application...'
                bat '"C:/Program Files/Maven/apache-maven-3.9.9/bin/mvn" clean package'
            }
        }

        stage('Unit and Integration Tests') {
            steps {
                echo 'Running Unit and Integration Tests...'
                bat '"C:/Program Files/Maven/apache-maven-3.9.9/bin/mvn" test'
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                    emailext(
                        to: 'ssgulluoglu@gmail.com',
                        subject: "Test Stage: Jenkins Pipeline Build ${currentBuild.fullDisplayName}",
                        body: "Unit and Integration Tests completed. Check the build here: ${env.BUILD_URL}\n\nResult: ${currentBuild.result}"
                    )
                }
            }
        }

        stage('Code Analysis with SonarQube') {
            steps {
                echo 'Running Code Analysis with SonarQube...'
                withSonarQubeEnv('SonarQubeServer') {  // Use the actual name of your configured SonarQube server
                    bat """
                        "C:/Program Files/Maven/apache-maven-3.9.9/bin/mvn" sonar:sonar \
                        -Dsonar.host.url=http://192.168.50.158:${SONAR_WEB_PORT} \
                        -Dsonar.jdbc.url=$SONAR_JDBC_URL \
                        -Dsonar.jdbc.username=$SONAR_JDBC_USERNAME \
                        -Dsonar.jdbc.password=$SONAR_JDBC_PASSWORD \
                        -Dsonar.login=$SONAR_LOGIN \
                        -Dsonar.password=$SONAR_PASSWORD
                    """
                }
            }
            post {
                failure {
                    echo 'SonarQube analysis failed. Please check credentials or SonarQube server.'
                    emailext(
                        to: 'ssgulluoglu@gmail.com',
                        subject: "SonarQube Analysis Failed: Jenkins Pipeline Build ${currentBuild.fullDisplayName}",
                        body: "SonarQube analysis failed. Check the build logs here: ${env.BUILD_URL}"
                    )
                }
            }
        }

        stage('Security Scan') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                echo 'Running Security Scan...'
                // Security scan logic goes here
            }
            post {
                always {
                    emailext(
                        to: 'ssgulluoglu@gmail.com',
                        subject: "Security Scan Stage: Jenkins Pipeline Build ${currentBuild.fullDisplayName}",
                        body: "Security scan completed. Check the build here: ${env.BUILD_URL}\n\nResult: ${currentBuild.result}"
                    )
                }
            }
        }

        stage('Deploy to Staging') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                echo 'Deploying to Staging...'
                // Add deployment logic here
            }
        }

        stage('Integration Tests on Staging') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                echo 'Running Integration Tests on Staging...'
                // Add integration testing logic here
            }
        }

        stage('Deploy to Production') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                echo 'Deploying to Production...'
                // Add production deployment logic here
            }
        }
    }

    post {
        always {
            emailext(
                to: 'ssgulluoglu@gmail.com',
                subject: "Jenkins Pipeline Build: ${currentBuild.fullDisplayName}",
                body: "Check the status of the build here: ${env.BUILD_URL}\n\n${currentBuild.result}"
            )
        }

        failure {
            echo 'Build failed. Skipping deployment stages.'
        }
    }
}
